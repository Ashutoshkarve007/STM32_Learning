///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        04/Dec/2018  21:41:40 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\Source\S /
//                          erialApp.c                                        /
//    Command line       =  -f F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½ /
//                          Æª-zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_flo /
//                          at_test\Projects\zstack\Utilities\SerialApp\CC253 /
//                          0DB\..\..\..\Tools\CC2530DB\f8wRouter.cfg         /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE -DRTR_NWK        /
//                          -DBLINK_LEDS) -f F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼ /
//                          °Æä½Ì³Ì\4.ÊµÕ½Æª-zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯ /
//                          \Ò»¶Ô4Í¨Ñ¶_float_test\Projects\zstack\Utilities\S /
//                          erialApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConf /
//                          ig.cfg (-DSECURE=0 -DZG_SECURE_DYNAMIC=0          /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 F:\zigbee\zigbee¿ª·¢°åv5.3 /
//                          \´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª-zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿Ø /
//                          ÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_test\Projects\zstack\Utili /
//                          ties\SerialApp\Source\SerialApp.c -D ZIGBEEPRO    /
//                          -D HAL_UART=TRUE -D SERIAL_APP_PORT=0 -D          /
//                          LCD_SUPPORTED -lC F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë /
//                          ¼°Æä½Ì³Ì\4.ÊµÕ½Æª-zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼ /
//                          ¯\Ò»¶Ô4Í¨Ñ¶_float_test\Projects\zstack\Utilities\ /
//                          SerialApp\CC2530DB\RouterEB-Pro\List\ -lA         /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \RouterEB-Pro\List\ --diag_suppress Pe001,Pa010   /
//                          -o F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½ /
//                          Æª-zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_flo /
//                          at_test\Projects\zstack\Utilities\SerialApp\CC253 /
//                          0DB\RouterEB-Pro\Obj\ -e --debug --core=plain     /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 8 -I F:\zigbee\zigbee¿ª·¢°åv5.3 /
//                          \´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª-zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿Ø /
//                          ÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_test\Projects\zstack\Utili /
//                          ties\SerialApp\CC2530DB\ -I                       /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\SOURCE\ -I F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æ /
//                          ä½Ì³Ì\4.ÊµÕ½Æª-zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò /
//                          »¶Ô4Í¨Ñ¶_float_test\Projects\zstack\Utilities\Ser /
//                          ialApp\CC2530DB\..\..\..\ZMAIN\TI2530DB\ -I       /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\MT\ -I                 /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\HAL\INCLUDE\ -I        /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\HAL\TARGET\CC2530EB\   /
//                          -I F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½ /
//                          Æª-zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_flo /
//                          at_test\Projects\zstack\Utilities\SerialApp\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\OSAL\MCU\CCSOC\ -I  /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\OSAL\INCLUDE\ -I       /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\AF\ -I           /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\NWK\ -I          /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\SEC\ -I          /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\SAPI\ -I         /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\SYS\ -I          /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\STACK\ZDO\ -I          /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\ZMAC\F8W\ -I           /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\ZMAC\ -I               /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\SERVICES\SADDR\ -I     /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\SERVICES\SDATA\ -I     /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\MAC\INCLUDE\ -I        /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\MAC\HIGH_LEVEL\ -I     /
//                          F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04\   /
//                          -I F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½ /
//                          Æª-zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_flo /
//                          at_test\Projects\zstack\Utilities\SerialApp\CC253 /
//                          0DB\..\..\..\..\..\COMPONENTS\MAC\LOW_LEVEL\srf04 /
//                          \SINGLE_CHIP\ -Ohz --require_prototypes           /
//    List file          =  F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª- /
//                          zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_ /
//                          test\Projects\zstack\Utilities\SerialApp\CC2530DB /
//                          \RouterEB-Pro\List\SerialApp.s51                  /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME SerialApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??SerialApp_CallBack?relay,0203H
        PUBLIC ??SerialApp_Init?relay
        FUNCTION ??SerialApp_Init?relay,0203H
        PUBLIC ??SerialApp_ProcessEvent?relay
        FUNCTION ??SerialApp_ProcessEvent?relay,0203H
        FUNCTION ??SerialApp_ProcessMSGCmd?relay,0203H
        FUNCTION ??SerialApp_SendPeriodicMessage?relay,0203H
        PUBLIC EndDeviceID
        PUBLIC EndDeviceID_current
        PUBLIC NodesData
        FUNCTION SerialApp_CallBack,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC SerialApp_ClusterList
        PUBLIC SerialApp_Init
        FUNCTION SerialApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC SerialApp_ProcessEvent
        FUNCTION SerialApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 36, STACK
        FUNCTION SerialApp_ProcessMSGCmd,021203H
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 44, STACK
        FUNCTION SerialApp_SendPeriodicMessage,021203H
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBLIC SerialApp_SimpleDesc
        PUBLIC SerialApp_TaskID
        PUBLIC SerialApp_epDesc
        PUBLIC TxBuffer
        PUBLIC gamma1_data
        PUBLIC gamma2_data
        PUBLIC gamma3_data
        PUBLIC gamma4_data
        PUBLIC phi1_data
        PUBLIC phi2_data
        PUBLIC phi3_data
        PUBLIC phi4_data
        PUBLIC position1_data
        PUBLIC position2_data
        PUBLIC position3_data
        PUBLIC position4_data
        PUBLIC theta1_data
        PUBLIC theta2_data
        PUBLIC theta3_data
        PUBLIC theta4_data
        PUBLIC x1_data
        PUBLIC x2_data
        PUBLIC x3_data
        PUBLIC x4_data
        PUBLIC y1_data
        PUBLIC y2_data
        PUBLIC y3_data
        PUBLIC y4_data
        PUBLIC z1_data
        PUBLIC z2_data
        PUBLIC z3_data
        PUBLIC z4_data
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalUARTOpen         SYMBOL "HalUARTOpen"
HalLcdWriteString   SYMBOL "HalLcdWriteString"
osal_rand           SYMBOL "osal_rand"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
osal_memcpy         SYMBOL "osal_memcpy"
AF_DataRequest      SYMBOL "AF_DataRequest"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_set_event      SYMBOL "osal_set_event"
HalUARTWrite        SYMBOL "HalUARTWrite"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??NLME_GetExtAddr?relay SYMBOL "?relay", NLME_GetExtAddr
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_rand?relay   SYMBOL "?relay", osal_rand
??osal_set_event?relay SYMBOL "?relay", osal_set_event
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
SerialApp_Init      SYMBOL "SerialApp_Init"
??SerialApp_Init?relay SYMBOL "?relay", SerialApp_Init
SerialApp_ProcessEvent SYMBOL "SerialApp_ProcessEvent"
??SerialApp_ProcessEvent?relay SYMBOL "?relay", SerialApp_ProcessEvent

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_rand
        FUNCTION osal_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_set_event
        FUNCTION osal_set_event,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??NLME_GetExtAddr?relay
        FUNCTION ??NLME_GetExtAddr?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_rand?relay
        FUNCTION ??osal_rand?relay,00H
        EXTERN ??osal_set_event?relay
        FUNCTION ??osal_set_event?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H

// F:\zigbee\zigbee¿ª·¢°åv5.3\´úÂë¼°Æä½Ì³Ì\4.ÊµÕ½Æª-zigbeeÒ»¸öÐ­µ÷Æ÷¶à¸öÖÕ¶Ë¿ØÖÆ²É¼¯\Ò»¶Ô4Í¨Ñ¶_float_test\Projects\zstack\Utilities\SerialApp\Source\SerialApp.c
//    1 /*********************************************************************
//    2 * INCLUDES
//    3 */
//    4 #include <stdio.h>
//    5 #include <string.h>
//    6 
//    7 #include "AF.h"
//    8 #include "OnBoard.h"
//    9 #include "OSAL_Tasks.h"
//   10 #include "SerialApp.h"
//   11 #include "ZDApp.h"
//   12 #include "ZDObject.h"
//   13 #include "ZDProfile.h"
//   14 
//   15 #include "hal_drivers.h"
//   16 #include "hal_key.h"
//   17 #if defined ( LCD_SUPPORTED )
//   18 #include "hal_lcd.h"
//   19 #endif
//   20 #include "hal_led.h"
//   21 #include "hal_uart.h"
//   22 
//   23 #include "DHT11.h"
//   24 #include "nwk_globals.h"
//   25 /*********************************************************************
//   26 * MACROS
//   27 */
//   28 #define COORD_ADDR   0x00
//   29 #define ED_ADDR      0x01
//   30 #define UART0        0x00
//   31 #define MAX_NODE     0x04
//   32 #define SUM_NUM      0x01
//   33 #define UART_DEBUG   0x00        //µ÷ÊÔºê,Í¨¹ý´®¿ÚÊä³öÐ­µ÷Æ÷ºÍÖÕ¶ËµÄIEEE¡¢¶ÌµØÖ·
//   34 
//   35 #define ARRAY_SIZE(arr) (sizeof(arr) / sizeof(arr)[0])
//   36 
//   37 
//   38 
//   39 /*********************************************************************
//   40 * CONSTANTS
//   41 */
//   42 
//   43 #if !defined( SERIAL_APP_PORT )
//   44 #define SERIAL_APP_PORT  0
//   45 #endif
//   46 
//   47 #if !defined( SERIAL_APP_BAUD )
//   48 #define SERIAL_APP_BAUD  HAL_UART_BR_115200
//   49 #endif
//   50 
//   51 // When the Rx buf space is less than this threshold, invoke the Rx callback.
//   52 #if !defined( SERIAL_APP_THRESH )
//   53 #define SERIAL_APP_THRESH  64
//   54 #endif
//   55 
//   56 #if !defined( SERIAL_APP_RX_SZ )
//   57 #define SERIAL_APP_RX_SZ  128
//   58 #endif
//   59 
//   60 #if !defined( SERIAL_APP_TX_SZ )
//   61 #define SERIAL_APP_TX_SZ  128
//   62 #endif
//   63 
//   64 // Millisecs of idle time after a byte is received before invoking Rx callback.
//   65 #if !defined( SERIAL_APP_IDLE )
//   66 #define SERIAL_APP_IDLE  6
//   67 #endif
//   68 
//   69 // Loopback Rx bytes to Tx for throughput testing.
//   70 #if !defined( SERIAL_APP_LOOPBACK )
//   71 #define SERIAL_APP_LOOPBACK  FALSE
//   72 #endif
//   73 
//   74 // This is the max byte count per OTA message.
//   75 #if !defined( SERIAL_APP_TX_MAX )
//   76 #define SERIAL_APP_TX_MAX  20
//   77 #endif
//   78 
//   79 #define SERIAL_APP_RSP_CNT  4
//   80 
//   81 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
//   82 const cId_t SerialApp_ClusterList[SERIALAPP_MAX_CLUSTERS] =
SerialApp_ClusterList:
        DATA16
        DW 1
        DW 0
//   83 {
//   84 	SERIALAPP_CLUSTERID
//   85 };
//   86 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   87 const SimpleDescriptionFormat_t SerialApp_SimpleDesc =
SerialApp_SimpleDesc:
        DB 11
        DATA16
        DW 3845
        DW 1
        DATA8
        DB 0
        DB 2
        DATA16
        DW SerialApp_ClusterList
        DATA8
        DB 2
        DATA16
        DW SerialApp_ClusterList
//   88 {
//   89 	SERIALAPP_ENDPOINT,              //  int   Endpoint;
//   90     SERIALAPP_PROFID,                //  uint16 AppProfId[2];
//   91     SERIALAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//   92     SERIALAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//   93     SERIALAPP_FLAGS,                 //  int   AppFlags:4;
//   94     SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//   95     (cId_t *)SerialApp_ClusterList,  //  byte *pAppInClusterList;
//   96     SERIALAPP_MAX_CLUSTERS,          //  byte  AppNumOutClusters;
//   97     (cId_t *)SerialApp_ClusterList   //  byte *pAppOutClusterList;
//   98 };
//   99 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  100 const endPointDesc_t SerialApp_epDesc =
SerialApp_epDesc:
        DB 11
        DATA16
        DW SerialApp_TaskID
        DW SerialApp_SimpleDesc
        DATA8
        DB 0
//  101 {
//  102 	SERIALAPP_ENDPOINT,
//  103     &SerialApp_TaskID,
//  104     (SimpleDescriptionFormat_t *)&SerialApp_SimpleDesc,
//  105     noLatencyReqs
//  106 };
//  107 
//  108 /*********************************************************************
//  109 * TYPEDEFS
//  110 */
//  111 
//  112 /*********************************************************************
//  113 * GLOBAL VARIABLES
//  114 */
//  115 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  116 uint8 SerialApp_TaskID;    // Task ID for internal task/event processing.
SerialApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  117 
//  118 /*********************************************************************
//  119 * EXTERNAL VARIABLES
//  120 */
//  121 
//  122 /*********************************************************************
//  123 * EXTERNAL FUNCTIONS
//  124 */
//  125 
//  126 /*********************************************************************
//  127 * LOCAL VARIABLES
//  128 */
//  129 static bool SendFlag = 0;
//  130 
//  131 static uint8 SerialApp_MsgID;
//  132 
//  133 static afAddrType_t SerialApp_TxAddr;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  134 static afAddrType_t Broadcast_DstAddr;
Broadcast_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
//  135 
//  136 static uint8 SerialApp_TxSeq;
//  137 static uint8 SerialApp_TxBuf[SERIAL_APP_TX_MAX+1];

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 static uint8 SerialApp_TxLen;
SerialApp_TxLen:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  139 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  140 static afAddrType_t SerialApp_RxAddr;
SerialApp_RxAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  141 static uint8 SerialApp_RspBuf[SERIAL_APP_RSP_CNT];
SerialApp_RspBuf:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  142 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  143 static devStates_t SerialApp_NwkState;
SerialApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  144 static afAddrType_t SerialApp_TxAddr;
SerialApp_TxAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  145 static uint8 SerialApp_MsgID;
SerialApp_MsgID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  146 //---------------------------------------------------------------------
//  147 

        RSEG XDATA_I:XDATA:NOROOT(0)
//  148 float NodesData[MAX_NODE][SUM_NUM]={{725.432},{2527.222},{125.115},{1.989}};  
NodesData:
        DATA8
        DS 16
        REQUIRE `?<Initializer for NodesData>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  149 uint16 EndDeviceID[MAX_NODE]={0x0001,0x0002,0x0003,0x0004};
EndDeviceID:
        DATA8
        DS 8
        REQUIRE `?<Initializer for EndDeviceID>`
        REQUIRE __INIT_XDATA_I

        RSEG XDATA_I:XDATA:NOROOT(0)
//  150 uint16 EndDeviceID_current=0x0002;
EndDeviceID_current:
        DATA16
        DS 2
        REQUIRE `?<Initializer for EndDeviceID_current>`
        REQUIRE __INIT_XDATA_I
//  151 
//  152 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  153 char position1_data[4]={0};//ÖÕ¶Ë1
position1_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  154 char position2_data[4]={0};//ÖÕ¶Ë2
position2_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  155 char position3_data[4]={0};//ÖÕ¶Ë3
position3_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  156 char position4_data[4]={0};//ÖÕ¶Ë4
position4_data:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  157 
//  158 
//  159 
//  160 union position1
//  161 {
//  162   float position1_float;
//  163   unsigned char position1_char[4];

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  164 }x1_data,y1_data,z1_data,theta1_data,phi1_data,gamma1_data;
x1_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
y1_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
z1_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
theta1_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
phi1_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
gamma1_data:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  165 
//  166 
//  167 union position2
//  168 {
//  169 float position2_float;
//  170 unsigned char position2_char[4];

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  171 }x2_data,y2_data,z2_data,theta2_data,phi2_data,gamma2_data;
x2_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
y2_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
z2_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
theta2_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
phi2_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
gamma2_data:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  172 
//  173 union position3
//  174 {
//  175 float position3_float;
//  176 unsigned char position3_char[4];

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  177 }x3_data,y3_data,z3_data,theta3_data,phi3_data,gamma3_data;
x3_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
y3_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
z3_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
theta3_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
phi3_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
gamma3_data:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  178 
//  179 union position4
//  180 {
//  181 float position4_float;
//  182 unsigned char position4_char[4];

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//  183 }x4_data,y4_data,z4_data,theta4_data,phi4_data,gamma4_data;
x4_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
y4_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
z4_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
theta4_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
phi4_data:
        DS 4
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
gamma4_data:
        DS 4
        REQUIRE __INIT_XDATA_Z
//  184 
//  185 
//  186 
//  187 //---------------------------------------------------------------------
//  188 /*********************************************************************
//  189 * LOCAL FUNCTIONS
//  190 */
//  191 
//  192 static void SerialApp_HandleKeys( uint8 shift, uint8 keys );
//  193 static void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt );
//  194 static void SerialApp_Resp(void);
//  195 static void SerialApp_CallBack(uint8 port, uint8 event);
//  196 
//  197 
//  198 static void AfSendAddrInfo(void);
//  199   
//  200 static void SerialApp_SendPeriodicMessage( void );
//  201 
//  202 static uint8 XorCheckSum(uint8 * pBuf, uint8 len);
//  203 
//  204 /*********************************************************************
//  205 * @fn      SerialApp_Init
//  206 *
//  207 * @brief   This is called during OSAL tasks' initialization.
//  208 *
//  209 * @param   task_id - the Task ID assigned by OSAL.
//  210 *
//  211 * @return  none
//  212 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  213 void SerialApp_Init( uint8 task_id )
SerialApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function SerialApp_Init
        CODE
//  214 {
        FUNCALL SerialApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_Init, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R1
        MOV     R6,A
//  215     halUARTCfg_t uartConfig;
//  216     
//  217   
//  218 	
//  219 	SerialApp_TaskID = task_id;
        MOV     DPTR,#SerialApp_TaskID
        MOVX    @DPTR,A
//  220 	
//  221 	
//  222 	afRegister( (endPointDesc_t *)&SerialApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#SerialApp_epDesc & 0xff
        MOV     R3,#(SerialApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  223 	
//  224 	RegisterForKeys( task_id );
        ; Setup parameters for call to function RegisterForKeys
        MOV     A,R6
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  225 	
//  226 	uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  227 	uartConfig.baudRate             = SERIAL_APP_BAUD;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  228 	uartConfig.flowControl          = FALSE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  229 	uartConfig.flowControlThreshold = SERIAL_APP_THRESH; // 2x30 don't care - see uart driver.
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  230 	uartConfig.rx.maxBufSize        = SERIAL_APP_RX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  231 	uartConfig.tx.maxBufSize        = SERIAL_APP_TX_SZ;  // 2x30 don't care - see uart driver.
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  232 	uartConfig.idleTimeout          = SERIAL_APP_IDLE;   // 2x30 don't care - see uart driver.
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  233 	uartConfig.intEnable            = TRUE;              // 2x30 don't care - see uart driver.
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  234 	uartConfig.callBackFunc         = SerialApp_CallBack;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??SerialApp_CallBack?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??SerialApp_CallBack?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  235 	HalUARTOpen (UART0, &uartConfig);
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  236 	
//  237 #if defined ( LCD_SUPPORTED )
//  238 	HalLcdWriteString( "SerialApp", HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x2
        MOV     R2,#`?<Constant "SerialApp">` & 0xff
        MOV     R3,#(`?<Constant "SerialApp">` >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  239 #endif
//  240 	
//  241 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  242 
//  243 /*********************************************************************
//  244 * @fn      SerialApp_ProcessEvent
//  245 *
//  246 * @brief   Generic Application Task event processor.
//  247 *
//  248 * @param   task_id  - The OSAL assigned task ID.
//  249 * @param   events   - Bit map of events to process.
//  250 *
//  251 * @return  Event flags of all unprocessed events.
//  252 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  253 UINT16 SerialApp_ProcessEvent( uint8 task_id, UINT16 events )
SerialApp_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function SerialApp_ProcessEvent
        CODE
//  254 {
        FUNCALL SerialApp_ProcessEvent, SerialApp_SendPeriodicMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, SerialApp_ProcessMSGCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessEvent, osal_set_event
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 11
        MOV     A,#-0xb
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  255 	(void)task_id;  // Intentionally unreferenced parameter
//  256 	
//  257 	if ( events & SYS_EVENT_MSG )//ÊäÈëÏûÏ¢´¦Àí
        MOV     ?V0 + 6,#SerialApp_epDesc & 0xff
        MOV     ?V0 + 7,#(SerialApp_epDesc >> 8) & 0xff
        ANL     A,#0x80
        JZ      $+5
        LJMP    ??SerialApp_ProcessEvent_0 & 0xFFFF
//  258 	{
//  259 		afIncomingMSGPacket_t *MSGpkt;
//  260 		
//  261 		while ( (MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SerialApp_TaskID )) )
//  262 		{
//  263 			switch ( MSGpkt->hdr.event )//ÊäÈë
//  264 			{
//  265 		
//  266 				
//  267 			case KEY_CHANGE:
//  268 				SerialApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  269 				break;
//  270 				
//  271 			case AF_INCOMING_MSG_CMD://´ÓÆäËû½ÚµãÓ¦ÓÃ²ã·¢¸ø×Ô¼ºµÄÊý¾Ý°ü£¬¿ÉÒÔ¸Ä
//  272 				SerialApp_ProcessMSGCmd( MSGpkt );
//  273 				break;
//  274                 
//  275             case ZDO_STATE_CHANGE://Éè±¸ÍøÂç×´Ì¬£¬Ð­µ÷Æ÷¡¢Â·ÓÉÆ÷ºÍ
//  276               SerialApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
//  277               if ( (SerialApp_NwkState == DEV_ZB_COORD)
//  278                   || (SerialApp_NwkState == DEV_ROUTER)
//  279                   || (SerialApp_NwkState == DEV_END_DEVICE) )
//  280               {
//  281                 #if defined(ZDO_COORDINATOR) //Ð­µ÷Æ÷Í¨¹ý´®¿ÚÊä³ö×ÔÉí¶ÌµØÖ·¡¢IEEE  
//  282                     Broadcast_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
//  283                     Broadcast_DstAddr.endPoint = SERIALAPP_ENDPOINT;
//  284                     Broadcast_DstAddr.addr.shortAddr = 0xFFFF;
//  285                 
//  286                  
//  287                 #else                        //ÖÕ¶ËÎÞÏß·¢ËÍ¶ÌµØÖ·¡¢IEEE   
//  288                     AfSendAddrInfo();
//  289                 #endif
//  290                 
//  291               }
//  292               break;				
//  293 			default:
//  294 				break;
//  295 			}
//  296 			
//  297 			osal_msg_deallocate( (uint8 *)MSGpkt );
//  298 		}
//  299 		
//  300 		return ( events ^ SYS_EVENT_MSG );
//  301 	}
//  302     
//  303     //ÔÚ´ËÊÂ¼þÖÐ¿ÉÒÔ¶¨Ê±ÏòÐ­µ÷Æ÷·¢ËÍ½Úµã´«¸ÐÆ÷²ÎÊýÐÅÏ¢
//  304         
//  305      if ( events & SERIALAPP_SEND_PERIODIC_EVT )
        MOV     A,R6
        ANL     A,#0x3
        JNZ     $+5
        LJMP    ??SerialApp_ProcessEvent_1 & 0xFFFF
//  306     {
//  307         SerialApp_SendPeriodicMessage();
        ; Setup parameters for call to function SerialApp_SendPeriodicMessage
        LCALL   ??SerialApp_SendPeriodicMessage?relay
//  308         
//  309         osal_start_timerEx( SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT,
//  310             (SERIALAPP_SEND_PERIODIC_TIMEOUT + (osal_rand() & 0x00FF)) );
        ; Setup parameters for call to function osal_rand
        LCALL   ??osal_rand?relay
        ; Setup parameters for call to function osal_start_timerEx
        MOV     A,R2
        ADD     A,#-0xc
        MOV     R4,A
        CLR     A
        ADDC    A,#0x1
        MOV     R5,A
        MOV     R2,#0x3
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  311         
//  312         return (events ^ SERIALAPP_SEND_PERIODIC_EVT);
        MOV     A,R6
        XRL     A,#0x3
        MOV     R2,A
        MOV     A,R7
??SerialApp_ProcessEvent_2:
        MOV     R3,A
        LJMP    ??SerialApp_ProcessEvent_3 & 0xFFFF
//  313     }
??SerialApp_ProcessEvent_4:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#SerialApp_NwkState
        MOVX    @DPTR,A
        XRL     A,#0x9
        JZ      ??SerialApp_ProcessEvent_5
        MOVX    A,@DPTR
        XRL     A,#0x7
        JZ      ??SerialApp_ProcessEvent_5
        MOVX    A,@DPTR
        XRL     A,#0x6
        JZ      $+5
        LJMP    ??SerialApp_ProcessEvent_6 & 0xFFFF
??SerialApp_ProcessEvent_5:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_2` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_2` & 0xff
        MOV     A,#0xb
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        MOV     DPTR,#SerialApp_TxAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0xb
        MOVX    @DPTR,A
        MOV     DPTR,#SerialApp_TxAddr
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x3b
        MOVX    @DPTR,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
        MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 0,#0xb
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R1,#0x0
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     R2,#SerialApp_TxAddr & 0xff
        MOV     R3,#(SerialApp_TxAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
??SerialApp_ProcessEvent_6:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??osal_msg_deallocate?relay
??SerialApp_ProcessEvent_0:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,R2
        ORL     A,?V0 + 5
        JZ      ??SerialApp_ProcessEvent_7
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#-0x1a
        JZ      ??SerialApp_ProcessEvent_8
        ADD     A,#0x49
        JNZ     $+5
        LJMP    ??SerialApp_ProcessEvent_4 & 0xFFFF
        SJMP    ??SerialApp_ProcessEvent_6
??SerialApp_ProcessEvent_8:
        ; Setup parameters for call to function SerialApp_ProcessMSGCmd
        LCALL   ??SerialApp_ProcessMSGCmd?relay
        SJMP    ??SerialApp_ProcessEvent_6
??SerialApp_ProcessEvent_7:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        LJMP    ??SerialApp_ProcessEvent_2 & 0xFFFF
//  314 
//  315 	
//  316     if ( events & SERIALAPP_RESP_EVT )
??SerialApp_ProcessEvent_1:
        MOV     A,R6
        ANL     A,#0x2
        JZ      ??SerialApp_ProcessEvent_9
//  317 	{
//  318 		SerialApp_Resp();
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
        MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 0,#SerialApp_RspBuf & 0xff
        MOV     ?V0 + 1,#(SerialApp_RspBuf >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 36)
        MOV     R1,#0x0
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     R2,#SerialApp_RxAddr & 0xff
        MOV     R3,#(SerialApp_RxAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        JZ      ??SerialApp_ProcessEvent_10
        ; Setup parameters for call to function osal_set_event
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#SerialApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_set_event?relay
//  319 		return ( events ^ SERIALAPP_RESP_EVT );
??SerialApp_ProcessEvent_10:
        MOV     A,R6
        XRL     A,#0x2
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??SerialApp_ProcessEvent_3
//  320 	}
//  321 	
//  322 	return ( 0 ); 
??SerialApp_ProcessEvent_9:
        MOV     R2,#0x0
        MOV     R3,#0x0
??SerialApp_ProcessEvent_3:
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 16)
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock2
//  323 }
//  324 
//  325 /*********************************************************************
//  326 * @fn      SerialApp_HandleKeys
//  327 *
//  328 * @brief   Handles all key events for this device.
//  329 *
//  330 * @param   shift - true if in shift/alt.
//  331 * @param   keys  - bit field for key events.
//  332 *
//  333 * @return  none
//  334 */
//  335 void SerialApp_HandleKeys( uint8 shift, uint8 keys )
//  336 {
//  337 #if defined(ZDO_COORDINATOR)//Ð­µ÷Æ÷
//  338 	
//  339     if ( keys & HAL_KEY_SW_6 ) //°´S1¼üÆô¶¯»òÍ£Ö¹ÖÕ¶Ë¶¨Ê±ÉÏ±¨Êý¾Ý 
//  340     {
//  341       if(SendFlag == 0)
//  342         {
//  343         SendFlag = 1;
//  344       
//  345         osal_start_timerEx( SerialApp_TaskID,
//  346                             SERIALAPP_SEND_PERIODIC_EVT,
//  347                             SERIALAPP_SEND_PERIODIC_TIMEOUT );
//  348         }
//  349         else
//  350         {      
//  351             SendFlag = 0;
//  352            
//  353             osal_stop_timerEx(SerialApp_TaskID, SERIALAPP_SEND_PERIODIC_EVT);
//  354         }
//  355     }
//  356     
//  357 #endif
//  358 }
//  359 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  360 void SerialApp_ProcessMSGCmd( afIncomingMSGPacket_t *pkt )
SerialApp_ProcessMSGCmd:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function SerialApp_ProcessMSGCmd
        CODE
//  361 {
        FUNCALL SerialApp_ProcessMSGCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_ProcessMSGCmd, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 30
        MOV     A,#-0x1e
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
//  362 
//  363    
//  364     uint8 afRxData[26]={0};
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>` & 0xff
        MOV     A,#0x1a
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  365     uint8 getData[4]={0};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_1` & 0xff
        MOV     A,#0x4
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  366     uint8 i;
//  367     
//  368 	switch ( pkt->clusterId )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??SerialApp_ProcessMSGCmd_0
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_ProcessMSGCmd_0:
        JNZ     ??SerialApp_ProcessMSGCmd_1
//  369 	{
//  370 
//  371 	case SERIALAPP_CLUSTERID:
//  372         osal_memcpy(afRxData, pkt->cmd.Data, pkt->cmd.DataLength);
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R2
        ADD     A,#0x21
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
        CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,R2
        ADD     A,#0x1f
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 41)
//  373 		switch(afRxData[0]) 
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0x3a
        JNZ     ??SerialApp_ProcessMSGCmd_1
//  374 		{
//  375 #if defined(ZDO_COORDINATOR)//Ð­µ÷Æ÷£¬½ÓÊÕÊý¾Ý
//  376 		
//  377          
//  378                  
//  379 #else  //ÖÕ¶Ë£¬½ÓÊÕµ½Êý¾Ý,´òÓ¡Ð­µ÷Æ÷Êý¾Ý
//  380         case 0x3A:  //¿ªÊ¼·û£¬ÖÕ¶Ë½ÓÊÕµ½µÄÊý¾Ý	      
//  381           
//  382               if(EndDeviceID_current == afRxData[2])//ÑéÖ¤ÖÕ¶ËÉè±¸µØÖ·,0x01
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_0:
        JNZ     ??SerialApp_ProcessMSGCmd_2
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_ProcessMSGCmd_2:
        JNZ     ??SerialApp_ProcessMSGCmd_3
//  383 		    {
//  384                       for (i=0;i<4;i++)
        MOV     R4,#0x0
//  385                       {
//  386                         getData[i]=afRxData[3+i];
??SerialApp_ProcessMSGCmd_4:
        MOV     DPL,R4
        MOV     R0,DPL
        MOV     R1,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
//  387                       }
??CrossCallReturnLabel_11:
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_13:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_4:
        JC      ??SerialApp_ProcessMSGCmd_4
//  388 
//  389                            HalUARTWrite(UART0, getData,4);                 
??SerialApp_ProcessMSGCmd_5:
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x4
        MOV     R5,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??HalUARTWrite?relay
//  390                     }  
//  391               else if(EndDeviceID_current == afRxData[8])//ÑéÖ¤ÖÕ¶ËÉè±¸µØÖ·,0x01
//  392 		    {
//  393 		            for (i=0;i<4;i++)
//  394                       {
//  395                         getData[i]=afRxData[9+i];
//  396                       }
//  397                            HalUARTWrite(UART0, getData,4);                 
//  398                     }
//  399              else if(EndDeviceID_current == afRxData[14])//ÑéÖ¤ÖÕ¶ËÉè±¸µØÖ·,0x01
//  400 		    {
//  401 		            for (i=0;i<4;i++)
//  402                       {
//  403                         getData[i]=afRxData[15+i];
//  404                       }
//  405                            HalUARTWrite(UART0, getData,4);                 
//  406                     }
//  407               else if(EndDeviceID_current == afRxData[20])//ÑéÖ¤ÖÕ¶ËÉè±¸µØÖ·,0x01
//  408 		    {
//  409 		            for (i=0;i<4;i++)
//  410                       {
//  411                         getData[i]=afRxData[21+i];
//  412                       }
//  413                            HalUARTWrite(UART0, getData,4);                 
//  414                     }
//  415               
//  416           	
//  417         break;
//  418         	
//  419 #endif
//  420        
//  421         }
//  422         break;
//  423 			
//  424 		
//  425 	}
//  426 }
??SerialApp_ProcessMSGCmd_1:
        MOV     A,#0x1e
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
        CFI CFA_XSP16 add(XSP16, 41)
??SerialApp_ProcessMSGCmd_3:
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_1:
        JNZ     ??SerialApp_ProcessMSGCmd_6
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_ProcessMSGCmd_6:
        JNZ     ??SerialApp_ProcessMSGCmd_7
        MOV     R4,#0x0
??SerialApp_ProcessMSGCmd_8:
        MOV     DPL,R4
        MOV     R0,DPL
        MOV     R1,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_12:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_14:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_5:
        JNC     ??SerialApp_ProcessMSGCmd_5
        SJMP    ??SerialApp_ProcessMSGCmd_8
??SerialApp_ProcessMSGCmd_7:
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_2:
        JNZ     ??SerialApp_ProcessMSGCmd_9
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_ProcessMSGCmd_9:
        JNZ     ??SerialApp_ProcessMSGCmd_10
        MOV     R4,#0x0
??SerialApp_ProcessMSGCmd_11:
        MOV     DPL,R4
        MOV     R0,DPL
        MOV     R1,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_17:
        ADD     A,#0xf
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_25:
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_15:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_6:
        JNC     ??SerialApp_ProcessMSGCmd_5
        SJMP    ??SerialApp_ProcessMSGCmd_11
??SerialApp_ProcessMSGCmd_10:
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine1 & 0xFFFF
??CrossCallReturnLabel_3:
        JNZ     ??SerialApp_ProcessMSGCmd_12
        INC     DPTR
        MOVX    A,@DPTR
??SerialApp_ProcessMSGCmd_12:
        JNZ     ??SerialApp_ProcessMSGCmd_1
        MOV     R4,#0x0
??SerialApp_ProcessMSGCmd_13:
        MOV     DPL,R4
        MOV     R0,DPL
        MOV     R1,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_18:
        ADD     A,#0x15
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_26:
        PUSH    A
        CFI CFA_SP SP+-1
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_16:
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_7:
        JC      $+5
        LJMP    ??SerialApp_ProcessMSGCmd_5 & 0xFFFF
        SJMP    ??SerialApp_ProcessMSGCmd_13
        CFI EndBlock cfiBlock3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
        CFI Block cfiCond4 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_17
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond5 Using cfiCommon0
        CFI (cfiCond5) NoFunction
        CFI (cfiCond5) Conditional ??CrossCallReturnLabel_18
        CFI (cfiCond5) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond5) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond5) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond5) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond5) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond5) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond5) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond5) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond5) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond5) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond5) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond5) CFA_SP SP+0
        CFI (cfiCond5) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker6 Using cfiCommon1
        CFI (cfiPicker6) NoFunction
        CFI (cfiPicker6) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     R2,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R2
        RET
        CFI EndBlock cfiCond4
        CFI EndBlock cfiCond5
        CFI EndBlock cfiPicker6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+-1
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+-1
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+-1
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_20:
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
        CFI Block cfiCond12 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_13
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+-1
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond13 Using cfiCommon0
        CFI (cfiCond13) NoFunction
        CFI (cfiCond13) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_14
        CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond13) CFA_SP SP+-1
        CFI (cfiCond13) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond14 Using cfiCommon0
        CFI (cfiCond14) NoFunction
        CFI (cfiCond14) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_15
        CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond14) CFA_SP SP+-1
        CFI (cfiCond14) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond15 Using cfiCommon0
        CFI (cfiCond15) NoFunction
        CFI (cfiCond15) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_16
        CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond15) CFA_SP SP+-1
        CFI (cfiCond15) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_11
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond17 Using cfiCommon0
        CFI (cfiCond17) NoFunction
        CFI (cfiCond17) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_12
        CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond17) CFA_SP SP+0
        CFI (cfiCond17) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker18 Using cfiCommon1
        CFI (cfiPicker18) NoFunction
        CFI (cfiPicker18) Picker
        MOV     A,DPL
        ADD     A,R0
        MOV     DPL,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     DPH,A
        RET
        CFI EndBlock cfiCond12
        CFI EndBlock cfiCond13
        CFI EndBlock cfiCond14
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiCond17
        CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_11
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker21 Using cfiCommon1
        CFI (cfiPicker21) NoFunction
        CFI (cfiPicker21) Picker
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_19:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiPicker21

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond22 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_23
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond24 Using cfiCommon0
        CFI (cfiCond24) NoFunction
        CFI (cfiCond24) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond24) CFA_SP SP+0
        CFI (cfiCond24) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond25 Using cfiCommon0
        CFI (cfiCond25) NoFunction
        CFI (cfiCond25) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond25) CFA_SP SP+0
        CFI (cfiCond25) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker26 Using cfiCommon1
        CFI (cfiPicker26) NoFunction
        CFI (cfiPicker26) Picker
        MOV     DPL,A
        MOV     A,R3
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiCond24
        CFI EndBlock cfiCond25
        CFI EndBlock cfiPicker26
        REQUIRE ??Subroutine9_0
        ; // Fall through to label ??Subroutine9_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine9_0:
        CFI Block cfiCond27 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_21
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_22
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_23
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_24
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 44)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_25
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_26
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker33 Using cfiCommon1
        CFI (cfiPicker33) NoFunction
        CFI (cfiPicker33) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiCond34 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_2
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond37 Using cfiCommon0
        CFI (cfiCond37) NoFunction
        CFI (cfiCond37) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond37) CFA_SP SP+0
        CFI (cfiCond37) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiPicker38 Using cfiCommon1
        CFI (cfiPicker38) NoFunction
        CFI (cfiPicker38) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPH,#(EndDeviceID_current >> 8) & 0xff
        MOV     DPL,#EndDeviceID_current & 0xff
        MOVX    A,@DPTR
        XRL     A,R0
        RET
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiCond37
        CFI EndBlock cfiPicker38
//  427 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  428 uint8 TxBuffer[26];
TxBuffer:
        DS 26
        REQUIRE __INIT_XDATA_Z
//  429 
//  430 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  431 void SerialApp_SendPeriodicMessage( void )//ÖÕ¶Ë¶¨Ê±·¢¸øÐ­µ÷Æ÷
SerialApp_SendPeriodicMessage:
        CFI Block cfiBlock39 Using cfiCommon0
        CFI Function SerialApp_SendPeriodicMessage
        CODE
//  432 { 
        FUNCALL SerialApp_SendPeriodicMessage, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL SerialApp_SendPeriodicMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  433    
//  434      
//  435      TxBuffer[0] = 0x3A;   
        MOV     DPTR,#TxBuffer
        MOV     A,#0x3a
        MOVX    @DPTR,A
//  436      
//  437      TxBuffer[1] = 0x00;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  438      TxBuffer[2] = EndDeviceID[0];
        MOV     DPTR,#EndDeviceID
        MOVX    A,@DPTR
        MOV     DPTR,#TxBuffer + 2
        MOVX    @DPTR,A
//  439    
//  440      
//  441      TxBuffer[7] = 0x00;
        MOV     DPTR,#TxBuffer + 7
        CLR     A
        MOVX    @DPTR,A
//  442      TxBuffer[8] = EndDeviceID[1];
        MOV     DPTR,#EndDeviceID + 2
        MOVX    A,@DPTR
        MOV     DPTR,#TxBuffer + 8
        MOVX    @DPTR,A
//  443     
//  444      
//  445      TxBuffer[13] = 0x00;
        MOV     DPTR,#TxBuffer + 13
        CLR     A
        MOVX    @DPTR,A
//  446      TxBuffer[14] = EndDeviceID[2];
        MOV     DPTR,#EndDeviceID + 4
        MOVX    A,@DPTR
        MOV     DPTR,#TxBuffer + 14
        MOVX    @DPTR,A
//  447      
//  448      TxBuffer[19] = 0x00;
        MOV     DPTR,#TxBuffer + 19
        CLR     A
        MOVX    @DPTR,A
//  449      TxBuffer[20] = EndDeviceID[3];
        MOV     DPTR,#EndDeviceID + 6
        MOVX    A,@DPTR
        MOV     DPTR,#TxBuffer + 20
        MOVX    @DPTR,A
//  450      
//  451 
//  452           x1_data.position1_float=NodesData[0][0];
        MOV     DPTR,#NodesData
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#x1_data
        LCALL   ?XSTORE_R2345
//  453         
//  454          
//  455           x2_data.position2_float=NodesData[1][0];
        MOV     DPTR,#NodesData + 4
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#x2_data
        LCALL   ?XSTORE_R2345
//  456          
//  457           
//  458           x3_data.position3_float=NodesData[2][0];
        MOV     DPTR,#NodesData + 8
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#x3_data
        LCALL   ?XSTORE_R2345
//  459          
//  460         
//  461           x4_data.position4_float=NodesData[3][0];
        MOV     DPTR,#NodesData + 12
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#x4_data
        LCALL   ?XSTORE_R2345
//  462         
//  463  
//  464         for (uint8 i=0;i<4;i++)
        MOV     R4,#0x0
//  465     
//  466         {
//  467                TxBuffer[3+i]=x1_data.position1_char[i];
??SerialApp_SendPeriodicMessage_0:
        MOV     DPL,R4
        MOV     R2,DPL
        MOV     A,#TxBuffer & 0xff
        ADD     A,R2
        MOV     R0,A
        MOV     A,#(TxBuffer >> 8) & 0xff
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,#x1_data & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(x1_data >> 8) & 0xff
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_9:
        MOVX    @DPTR,A
//  468 	      
//  469                
//  470                TxBuffer[9+i]=x2_data.position2_char[i];
        MOV     A,#x2_data & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(x2_data >> 8) & 0xff
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_10:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  471 	      
//  472                TxBuffer[15+i]=x3_data.position3_char[i];
        MOV     A,#x3_data & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(x3_data >> 8) & 0xff
        LCALL   ??Subroutine9_0 & 0xFFFF
??CrossCallReturnLabel_21:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#0xf
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  473 	   
//  474                
//  475                TxBuffer[21+i]=x4_data.position4_char[i];
        MOV     A,#x4_data & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(x4_data >> 8) & 0xff
        LCALL   ??Subroutine9_0 & 0xFFFF
//  476 	
//  477 
//  478        
//  479              } 
??CrossCallReturnLabel_22:
        PUSH    A
        CFI CFA_SP SP+-1
        MOV     A,R0
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
        CFI CFA_SP SP+0
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_8:
        JC      ??SerialApp_SendPeriodicMessage_0
//  480        
//  481          
//  482 	TxBuffer[25] =0x23;
        MOV     DPTR,#TxBuffer + 25
        MOV     A,#0x23
        MOVX    @DPTR,A
//  483 
//  484        
//  485         
//  486         HalUARTWrite(UART0, TxBuffer,26);		
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1a
        MOV     R5,#0x0
        MOV     R2,#TxBuffer & 0xff
        MOV     R3,#(TxBuffer >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  487                 
//  488         AF_DataRequest(&Broadcast_DstAddr,
//  489                        (endPointDesc_t *)&SerialApp_epDesc,
//  490                         SERIALAPP_CLUSTERID,
//  491                         26, 
//  492                         TxBuffer,
//  493                         &SerialApp_MsgID, 
//  494                         0, 
//  495                         AF_DEFAULT_RADIUS);
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 11)
        MOV     ?V0 + 0,#SerialApp_MsgID & 0xff
        MOV     ?V0 + 1,#(SerialApp_MsgID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#TxBuffer & 0xff
        MOV     ?V0 + 1,#(TxBuffer >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 15)
        MOV     ?V0 + 0,#0x1a
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 17)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x0
        MOV     R4,#SerialApp_epDesc & 0xff
        MOV     R5,#(SerialApp_epDesc >> 8) & 0xff
        MOV     R2,#Broadcast_DstAddr & 0xff
        MOV     R3,#(Broadcast_DstAddr >> 8) & 0xff
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
//  496            
//  497 		 
//  498       
//  499 }
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock39

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond40 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_9
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI Block cfiCond41 Using cfiCommon0
        CFI (cfiCond41) NoFunction
        CFI (cfiCond41) Conditional ??CrossCallReturnLabel_10
        CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond41) CFA_SP SP+0
        CFI (cfiCond41) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker42 Using cfiCommon1
        CFI (cfiPicker42) NoFunction
        CFI (cfiPicker42) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
        CFI EndBlock cfiCond40
        CFI EndBlock cfiCond41
        CFI EndBlock cfiPicker42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiCond43 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_4
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond44 Using cfiCommon0
        CFI (cfiCond44) NoFunction
        CFI (cfiCond44) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond44) CFA_SP SP+0
        CFI (cfiCond44) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond45 Using cfiCommon0
        CFI (cfiCond45) NoFunction
        CFI (cfiCond45) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond45) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond45) CFA_SP SP+0
        CFI (cfiCond45) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond46 Using cfiCommon0
        CFI (cfiCond46) NoFunction
        CFI (cfiCond46) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond46) CFA_SP SP+0
        CFI (cfiCond46) CFA_XSP16 add(XSP16, 41)
        CFI Block cfiCond47 Using cfiCommon0
        CFI (cfiCond47) NoFunction
        CFI (cfiCond47) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond47) CFA_SP SP+0
        CFI (cfiCond47) CFA_XSP16 add(XSP16, 10)
        CFI Block cfiPicker48 Using cfiCommon1
        CFI (cfiPicker48) NoFunction
        CFI (cfiPicker48) Picker
        MOVX    @DPTR,A
        INC     R4
        MOV     A,R4
        CLR     C
        SUBB    A,#0x4
        RET
        CFI EndBlock cfiCond43
        CFI EndBlock cfiCond44
        CFI EndBlock cfiCond45
        CFI EndBlock cfiCond46
        CFI EndBlock cfiCond47
        CFI EndBlock cfiPicker48
//  500 
//  501 
//  502 
//  503 /*********************************************************************
//  504 * @fn      SerialApp_Resp
//  505 *
//  506 * @brief   Send data OTA.
//  507 *
//  508 * @param   none
//  509 *
//  510 * @return  none
//  511 */
//  512 static void SerialApp_Resp(void)
//  513 {
//  514 	if (afStatus_SUCCESS != AF_DataRequest(&SerialApp_RxAddr,
//  515 		(endPointDesc_t *)&SerialApp_epDesc,
//  516 		SERIALAPP_CLUSTERID2,
//  517 		SERIAL_APP_RSP_CNT, SerialApp_RspBuf,
//  518 		&SerialApp_MsgID, 0, AF_DEFAULT_RADIUS))
//  519 	{
//  520 		osal_set_event(SerialApp_TaskID, SERIALAPP_RESP_EVT);
//  521 	}
//  522 }
//  523 
//  524 /*********************************************************************
//  525 * @fn      SerialApp_CallBack
//  526 *
//  527 * @brief   Send data OTA.
//  528 *
//  529 * @param   port - UART port.
//  530 * @param   event - the UART port event flag.
//  531 *
//  532 * @return  none
//  533 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  534 static void SerialApp_CallBack(uint8 port, uint8 event)
SerialApp_CallBack:
        CFI Block cfiBlock49 Using cfiCommon0
        CFI Function SerialApp_CallBack
        CODE
//  535 {
        FUNCALL SerialApp_CallBack, SerialApp_SendPeriodicMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
//  536 	(void)port;
//  537 	
//  538 	if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
//  539 #if SERIAL_APP_LOOPBACK
//  540 		(SerialApp_TxLen < SERIAL_APP_TX_MAX))
//  541 #else
//  542 		!SerialApp_TxLen)
        MOV     A,#0x7
        ANL     A,R6
        JZ      ??SerialApp_CallBack_0
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        JNZ     ??SerialApp_CallBack_0
//  543 #endif
//  544 	{
//  545 		SerialApp_SendPeriodicMessage();
        ; Setup parameters for call to function SerialApp_SendPeriodicMessage
        LCALL   ??SerialApp_SendPeriodicMessage?relay
//  546 	}
//  547 }
??SerialApp_CallBack_0:
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock49

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for NodesData>`:
        DATA32
        DD 44355BA6H
        DD 451DF38DH
        DD 42FA3AE1H
        DD 3FFE978DH

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for EndDeviceID>`:
        DATA16
        DW 1
        DW 2
        DW 3
        DW 4

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for EndDeviceID_current>`:
        DATA16
        DW 2

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_ProcessMSGCmd?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_ProcessMSGCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_SendPeriodicMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_SendPeriodicMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??SerialApp_CallBack?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    SerialApp_CallBack

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "SerialApp">`:
        DB "SerialApp"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
`?<Constant {0}>_1`:
        DATA8
        DB 0
        DB 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_2`:
        DB 0
        DB 0, 0, 0, 0, 0, 0, 0, 0
        DB 0, 0

        END
//  548 
//  549 
//  550 
//  551 
//  552 
//  553 
//  554 void AfSendAddrInfo(void)
//  555 {
//  556     uint16 shortAddr;
//  557     uint8 strBuf[11]={0};  
//  558     
//  559     SerialApp_TxAddr.addrMode = (afAddrMode_t)Addr16Bit;
//  560     SerialApp_TxAddr.endPoint = SERIALAPP_ENDPOINT;
//  561     SerialApp_TxAddr.addr.shortAddr = 0x00;   
//  562     
//  563     shortAddr=NLME_GetShortAddr();
//  564     
//  565     strBuf[0] = 0x3B;                          //·¢ËÍµØÖ·¸øÐ­µ÷Æ÷ ¿ÉÓÃÓÚµã²¥
//  566     strBuf[1] = HI_UINT16( shortAddr );        //´æ·Å¶ÌµØÖ·¸ß8Î»
//  567     strBuf[2] = LO_UINT16( shortAddr );        //´æ·Å¶ÌµØÖ·µÍ8Î»
//  568     
//  569     osal_memcpy(&strBuf[3], NLME_GetExtAddr(), 8);
//  570         
//  571    if ( AF_DataRequest( &SerialApp_TxAddr, (endPointDesc_t *)&SerialApp_epDesc,
//  572                        SERIALAPP_CLUSTERID,
//  573                        11,
//  574                        strBuf,
//  575                        &SerialApp_MsgID, 
//  576                        0, 
//  577                        AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
//  578   {
//  579   }
//  580   else
//  581   {
//  582     // Error occurred in request to send.
//  583   }   
//  584 }
//  585 
//  586 
//  587 
//  588 
//  589 
//  590 
//  591 
//  592 
//  593 
//  594 
//  595 
//  596 /*********************************************************************
//  597 *********************************************************************/
// 
// 1 322 bytes in segment BANKED_CODE
//    30 bytes in segment BANK_RELAYS
//    26 bytes in segment XDATA_I
//    26 bytes in segment XDATA_ID
//    73 bytes in segment XDATA_ROM_C
//   182 bytes in segment XDATA_Z
// 
// 1 378 bytes of CODE  memory
//    73 bytes of CONST memory
//   208 bytes of XDATA memory
//
//Errors: none
//Warnings: 4
